#!/usr/bin/env python
"""
This script builds Icinga config from resources pulled from a Puppet database.

REQUIREMENTS
This script requires python-argparse and is meant to be run on *nix-systems.

COPYRIGHT
Copyright 2012 - Kumina B.V./Rutger Spiertz (rutger@kumina.nl), this script is licensed under the GNU GPL version 3 or higher.

"""
#Import the classes needed
import argparse
from os import path
import os
import MySQLdb
import sys
import shutil

parser = argparse.ArgumentParser(description='This script builds Icinga config from resources pulled from a Puppet database.')
parser.add_argument('-s', '--server', action='store', default='localhost', help='The host of the Puppet database.')
parser.add_argument('-d', '--database', action='store', default='puppet', help='The name of the Puppet database.')
parser.add_argument('-u', '--username', action='store', default='icinga', help='The user for the Puppet database.')
parser.add_argument('-p', '--password', action='store', required=True, help='The password for the Puppet database.')
parser.add_argument('-c', '--configdir', action='store', default='/etc/icinga/config', help='The directory the Icinga config is in.')

# Script starts here...
args = parser.parse_args()

basedir = '/tmp/icinga'

db = MySQLdb.connect(host = args.server, db = args.database, user = args.username, passwd=args.password)
c = db.cursor()

if path.isfile(basedir):
    print 'Base dir ' + basedir + ' is a file, not creating config.'
    sys.exit(1)
else:
    if path.isdir(basedir):
        shutil.rmtree(basedir)
    try:
        os.mkdir(basedir, 0755)
    except OSError:
        print 'Error creating base dir ' + basedir + '.'
        sys.exit(1)

configdirs = []
icinga_resources = []

hosts = {}
dup_hosts = set()
c.execute("select title, id from resources where restype='Gen_icinga::Host';")
resources = c.fetchall()
for title, host_id in resources:
    c.execute("select a.name, b.value from param_names as a, param_values as b where b.param_name_id = a.id and b.resource_id = %s", host_id)
    params = dict(c.fetchall())
    name = title.split(';')[0]
    try:
        address = title.split(';')[1]
        params['address'] = address
    except:
        address = False
    if address and '%s_%s' % (name, address) in hosts:
        name = '%s_%s' % (name, address)
    if name in hosts:
        if hosts[name]['address'] == params['address']:
            if params['parents'] != 'false':
                hosts[name]['parents'] = '%s, %s' % (hosts[name]['parents'], params['parents'])
            continue
        else:
            dup_hosts.add(name)
            name = '%s_%s' % (name, params['address'])
            params['conf_dir'] = '%s_%s' % (params['conf_dir'], params['address'])
    hosts[name] = params
for name in dup_hosts:
    params = hosts.pop(name)
    params['conf_dir'] = '%s_%s' % (params['conf_dir'], params['address'])
    hosts['%s_%s' % (name, params['address'])] = params
for name, params in hosts.items():
    dirname = ''.join([basedir, '/', params['conf_dir']])
    del params['conf_dir']
    filename = ''.join([dirname, '/host_', name, '.cfg'])
    if not path.isdir(dirname):
        os.makedirs(dirname, 0755)
    if params['register'] == '1':
        params['host_name'] = name
    else:
        params['name'] = name
    params['_PROXY'] = params['proxy']
    del params['proxy']
    ljust = len(max(params.keys(), key=len))
    host_str = ['define host {\n']
    for name, value in params.items():
        if value != 'false':
            host_str.append('  %s  %s\n' % (name.ljust(ljust), value))
    host_str.append('}\n')
    f = open(filename, 'w')
    f.write(''.join(host_str))
    f.close()

class Resource:
    def __init__(self, name, rname):
        self.name = name
        self.rname = rname
        self.max_param_len = 0
        self.params = {}
        self.add_param('conf_dir', False)

    def add_param(self, name, string = None, cust_name_str = None, ignore_if = 'false', value = None):
        if string is None:
            string = name
        if string:
            self.max_param_len = max(self.max_param_len, len(name))
        self.params[name] = {'name': name, 'string': string, 'cust_name_str': cust_name_str, 'ignore_if': ignore_if, 'value': value}

    def set_param(self, name, value):
        if name in self.params:
            if isinstance(self.params[name]['value'], list):
                self.params[name]['value'].append(value)
            else:
                self.params[name]['value'] = value

    def create(self):
        stringl = [basedir, '/']
        for name, data in self.params.items():
            if name == 'conf_dir':
                stringl.append(data['value'])
        stringl.extend(['/', self.rname, '_', self.name, '.cfg'])
        filename = ''.join(stringl)
        f = open(filename, 'w')
        f.write(self.__str__())
        f.close()

    def __str__(self):
        stringl = ['define %s {\n' % self.rname]
        for name, data in self.params.items():
            if data['string'] and data['value'] is not None and data['value'] != data['ignore_if']:
                name_str = data['string']
                if data['cust_name_str'] is not None:
                    name_str = getattr(self, data['cust_name_str'])()
                stringl.append('  %s  %s\n' % (name_str.ljust(self.max_param_len), data['value']))
        stringl.append('}\n')
        return ''.join(stringl)

# Configdirs
class Configdir(Resource):
    restype = 'Gen_icinga::Configdir'

    def __init__(self, name):
        self.name = name
        self.params = {}

    def create(self):
            return self.name

# Servicegroups
class Servicegroup(Resource):
    restype = 'Gen_icinga::Servicegroup'

    def __init__(self, name):
        Resource.__init__(self, name, 'servicegroup')
        self.add_param('name', 'servicegroup_name', value = name)
        self.add_param('sg_alias', 'alias')

# Services
class Service(Resource):
    restype = 'Gen_icinga::Service'

    def __init__(self, name):
        Resource.__init__(self, name, 'service')
        self.add_param('name', value = name)
        self.add_param('service_description')
        self.add_param('servicegroups')
        self.add_param('host_name')
        self.add_param('hostgroup_name')
        self.add_param('initial_state')
        self.add_param('active_checks_enabled')
        self.add_param('passive_checks_enabled')
        self.add_param('obsess_over_service')
        self.add_param('check_freshness')
        self.add_param('freshness_threshold')
        self.add_param('notifications_enabled')
        self.add_param('event_handler_enabled')
        self.add_param('flap_detection_enabled')
        self.add_param('process_perf_data')
        self.add_param('retain_status_information')
        self.add_param('retain_nonstatus_information')
        self.add_param('notification_interval')
        self.add_param('is_volatile')
        self.add_param('check_period')
        self.add_param('check_interval')
        self.add_param('retry_interval')
        self.add_param('notification_period')
        self.add_param('notification_options')
        self.add_param('use')
        self.add_param('contact_groups')
        self.add_param('contacts')
        self.add_param('max_check_attempts')
        self.add_param('check_command')
        self.add_param('arguments', False, value = [])
        self.add_param('proxy', '_PROXY')
        self.add_param('register')

# Serviceescalations
class Serviceescalation(Resource):
    restype = 'Gen_icinga::Serviceescalation'

    def __init__(self, name):
        Resource.__init__(self, name, 'serviceescalation')
        self.add_param('host_name')
        self.add_param('hostgroup_name')
        self.add_param('servicegroup_name')
        self.add_param('service_description')
        self.add_param('first_notification')
        self.add_param('last_notification')
        self.add_param('notification_interval')
        self.add_param('escalation_period')
        self.add_param('escalation_options')
        self.add_param('contact_groups')
        self.add_param('contacts')

# Servicedependencies
class Servicedependency(Resource):
    restype = 'Gen_icinga::Servicedependency'

    def __init__(self, name):
        Resource.__init__(self, name, 'servicedependency')
        self.add_param('dependent_host_name')
        self.add_param('dependent_service_description')
        self.add_param('host_name')
        self.add_param('service_description')
        self.add_param('execution_failure_criteria')
        self.add_param('notification_failure_criteria')

# Hostgroups
class Hostgroup(Resource):
    restype = 'Gen_icinga::Hostgroup'

    def __init__(self, name):
        Resource.__init__(self, name, 'hostgroup')
        self.add_param('name', 'hostgroup_name', value = name)
        self.add_param('hg_alias', 'alias')
        self.add_param('members')

# Hostescalations
class Hostescalation(Resource):
    restype = 'Gen_icinga::Hostescalation'

    def __init__(self, name):
        Resource.__init__(self, name, 'hostescalation')
        self.add_param('name', 'host_name')
        self.add_param('hostgroup_name')
        self.add_param('first_notification')
        self.add_param('last_notification')
        self.add_param('notification_interval')
        self.add_param('escalation_period')
        self.add_param('escalation_options')
        self.add_param('contact_groups')
        self.add_param('contacts')

# Contactgroups
class Contactgroup(Resource):
    restype = 'Gen_icinga::Contactgroup'

    def __init__(self, name):
        Resource.__init__(self, name, 'contactgroup')
        self.add_param('name', 'contactgroup_name', value=name)
        self.add_param('cg_alias', 'alias')

# Contacts
class Contact(Resource):
    restype = 'Gen_icinga::Contact'

    def __init__(self, name):
        Resource.__init__(self, name, 'contact')
        self.add_param('name', 'contact_name', value=name)
        self.add_param('c_alias', 'alias')
        self.add_param('service_notifications_enabled')
        self.add_param('host_notifications_enabled')
        self.add_param('service_notification_options')
        self.add_param('host_notification_options')
        self.add_param('host_notification_period')
        self.add_param('service_notification_period')
        self.add_param('service_notification_commands')
        self.add_param('host_notification_commands')
        self.add_param('contactgroups')
        self.add_param('pager')
        self.add_param('email')

# Timeperiods
class Timeperiod(Resource):
    restype = 'Gen_icinga::Timeperiod'

    def __init__(self, name):
        Resource.__init__(self, name, 'timeperiod')
        self.add_param('name', 'timeperiod_name', value=name)
        self.add_param('tp_alias', 'alias')
        self.add_param('monday')
        self.add_param('tuesday')
        self.add_param('wednesday')
        self.add_param('thursday')
        self.add_param('friday')
        self.add_param('saturday')
        self.add_param('sunday')

# Servercommands
class Servercommand(Resource):
    restype = 'Gen_icinga::Servercommand'

    def __init__(self, name):
        Resource.__init__(self, name, 'command')
        self.add_param('name', 'command_name', value=name)
        self.add_param('command_line')

resource_types = [Configdir, Hostgroup, Hostescalation, Servicegroup, Service, Serviceescalation, Servicedependency, Contactgroup, Contact, Timeperiod, Servercommand]
configdirs = []
icinga_resources = []
for resource_type in resource_types:
    c.execute("select title, id from resources where restype='%s';" % resource_type.restype)
    resources = c.fetchall()
    for resource in resources:
        res = resource_type(resource[0])
        c.execute("select a.name, b.value from param_names as a, param_values as b where b.param_name_id = a.id and b.resource_id = %s", resource[1])
        params = c.fetchall()
        paramsd = dict(params)
        if 'host_name' in paramsd and paramsd['host_name'] != 'false' and paramsd['host_name'] not in hosts and 'address' in paramsd and paramsd['address'] != 'false':
            if resource_type != Configdir:
                paramsd['conf_dir'] = '%s_%s' % (paramsd['conf_dir'], paramsd['address'])
                if 'name' in res.params:
                    res.params['name']['value'] = '%s_%s' % (res.params['name']['value'], paramsd['address'])
                if 'dependent_host_name' in paramsd and paramsd['dependent_host_name'] == paramsd['host_name']:
                    paramsd['dependent_host_name'] = '%s_%s' % (paramsd['dependent_host_name'], paramsd['address'])
            res.name = '%s_%s' % (res.name, paramsd['address'])
            paramsd['host_name'] = '%s_%s' % (paramsd['host_name'], paramsd['address'])
            params = paramsd.items()
        for param in params:
            res.set_param(*param)
        if resource_type == Configdir:
            configdirs.append(res)
        else:
            icinga_resources.append(res)
icinga_resources = configdirs + icinga_resources
for res in icinga_resources:
    res.create()
